// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  name        String
  nickname    String  @unique
  password    String
  thumbnail   String?
  description String?

  posts    Post[]
  comments Comment[]
  images   Image[]
  memos    Memo[]
}

model Post {
  id             Int       @id @default(autoincrement())
  title          String
  body           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  tags           Tag[]     @relation("TagsOnPost")
  comments       Comment[]
  comments_count Int       @default(0)
  thumbnail      String?
}

model Tag {
  id        Int      @id @default(autoincrement())
  content   String
  count     Int      @default(0)
  createdAt DateTime @default(now())
  posts     Post[]   @relation("TagsOnPost")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  children  Comment[] @relation("Parent_Children")
  parent    Comment?  @relation("Parent_Children", fields: [parentId], references: [id])
  parentId  Int?
  createdAt DateTime
  updatedAt DateTime
  path      Int[]
  isDeleted Boolean   @default(false)
  count     Int       @default(0)
}

model Image {
  id        Int      @id @default(autoincrement())
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  filesize  Int
  refId     Int
  createdAt DateTime
  updatedAt DateTime
  path      String
}

model Memo {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  refDate   String
  userId    Int
  content   String
  createdAt DateTime
  updatedAt DateTime
  openType  String   @default("public")
}
